(()=>{const e={middleMouseButton:1,init:()=>{e.bindEvents()},bindEvents:()=>{document.addEventListener("click",e.handleLinkClick),document.addEventListener("auxclick",e.handleLinkClick)},handleLinkClick:t=>{if("auxclick"!==t.type||t.button===e.middleMouseButton){var i=e.getLinkEl(t.target);if(i&&e.shouldTrackLink(i)){var n={url:i.href};return e.sendLinkClickEvent(t,i,"Cloaked Link: Click",n)}}},getLinkEl:e=>{for(;e&&(void 0===e.tagName||"a"!==e.tagName.toLowerCase()||!e.href);)e=e.parentNode;return e},shouldTrackLink:e=>plausibleAffiliateLinks.filter((t=>e.href.match(t))).length>0,sendLinkClickEvent:(t,i,n,l)=>{var a=!1;function r(){a||(a=!0,window.location=i.href)}e.shouldFollowLink(t,i)?(plausible(n,{props:l,callback:r}),setTimeout(r,5e3),t.preventDefault()):plausible(n,{props:l})},shouldFollowLink:(e,t)=>{if(e.defaultPrevented)return!1;var i=!t.target||t.target.match(/^_(self|parent|top)$/i),n=!(e.ctrlKey||e.metaKey||e.shiftKey)&&"click"===e.type;return i&&n}};e.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvcGxhdXNpYmxlLWFmZmlsaWF0ZS1saW5rcy5qcyIsIm1hcHBpbmdzIjoiTUFNQSxNQUFNQSxFQUF5QixDQUM5QkMsa0JBQW1CLEVBS25CQyxLQUFNLEtBQ0xGLEVBQXVCRyxZQUFZLEVBTXBDQSxXQUFZLEtBQ1hDLFNBQVNDLGlCQUFpQixRQUFTTCxFQUF1Qk0saUJBQzFERixTQUFTQyxpQkFBaUIsV0FBWUwsRUFBdUJNLGdCQUFnQixFQVE5RUEsZ0JBQWtCQyxJQUNqQixHQUFlLGFBQVhBLEVBQUVDLE1BQXVCRCxFQUFFRSxTQUFXVCxFQUF1QkMsa0JBQWpFLENBSUEsSUFBSVMsRUFBT1YsRUFBdUJXLFVBQVVKLEVBQUVLLFFBRTlDLEdBQUlGLEdBQVFWLEVBQXVCYSxnQkFBZ0JILEdBQU8sQ0FDekQsSUFDSUksRUFBYSxDQUFDQyxJQUFLTCxFQUFLTSxNQUU1QixPQUFPaEIsRUFBdUJpQixtQkFBbUJWLEVBQUdHLEVBSHBDLHNCQUdxREksRUFDdEUsQ0FUQSxDQVNBLEVBVURILFVBQVlELElBQ1gsS0FBT0EsU0FBaUMsSUFBakJBLEVBQUtRLFNBQTBELE1BQS9CUixFQUFLUSxRQUFRQyxnQkFBMEJULEVBQUtNLE9BQ2xHTixFQUFPQSxFQUFLVSxXQUdiLE9BQU9WLENBQUksRUFTWkcsZ0JBQWtCSCxHQUNJVyx3QkFFV0MsUUFBUUMsR0FDaENiLEVBQUtNLEtBQUtRLE1BQU1ELEtBR05FLE9BQVMsRUFXNUJSLG1CQUFvQixDQUFDUyxFQUFPaEIsRUFBTWlCLEVBQVdiLEtBQzVDLElBQUljLEdBQWUsRUFFbkIsU0FBU0MsSUFDSEQsSUFDSkEsR0FBZSxFQUNmRSxPQUFPQyxTQUFXckIsRUFBS00sS0FFekIsQ0FFSWhCLEVBQXVCZ0MsaUJBQWlCTixFQUFPaEIsSUFDbER1QixVQUFVTixFQUFXLENBQUNPLE1BQU9wQixFQUFZcUIsU0FBVU4sSUFDbkRPLFdBQVdQLEVBQVksS0FDdkJILEVBQU1XLGtCQUVOSixVQUFVTixFQUFXLENBQUNPLE1BQU9wQixHQUM5QixFQVNEa0IsaUJBQWtCLENBQUNOLEVBQU9oQixLQUV6QixHQUFJZ0IsRUFBTVksaUJBQ1QsT0FBTyxFQUdSLElBQUlDLEdBQXdCN0IsRUFBS0UsUUFBVUYsRUFBS0UsT0FBT1ksTUFBTSx5QkFDekRnQixJQUFtQmQsRUFBTWUsU0FBV2YsRUFBTWdCLFNBQVdoQixFQUFNaUIsV0FBNEIsVUFBZmpCLEVBQU1sQixLQUVsRixPQUFPK0IsR0FBd0JDLENBQWMsR0FJL0N4QyxFQUF1QkUsTSIsInNvdXJjZXMiOlsid2VicGFjazovL3BsYXVzaWJsZS1hbmFseXRpY3MvLi9hc3NldHMvc3JjL2pzL2FmZmlsaWF0ZS1saW5rcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsb2FrZWQgKEFmZmlsaWF0ZSkgTGlua3MgdHJhY2tpbmcgSlNcbiAqXG4gKiBAc2luY2UgMi40LjBcbiAqL1xuXG5jb25zdCBwbGF1c2libGVMaW5rc1RyYWNraW5nID0ge1xuXHRtaWRkbGVNb3VzZUJ1dHRvbjogMSxcblxuXHQvKipcblx0ICogSW50aWFsaXplLlxuXHQgKi9cblx0aW5pdDogKCkgPT4ge1xuXHRcdHBsYXVzaWJsZUxpbmtzVHJhY2tpbmcuYmluZEV2ZW50cygpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBCaW5kIEV2ZW50cy5cblx0ICovXG5cdGJpbmRFdmVudHM6ICgpID0+IHtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHBsYXVzaWJsZUxpbmtzVHJhY2tpbmcuaGFuZGxlTGlua0NsaWNrKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdhdXhjbGljaycsIHBsYXVzaWJsZUxpbmtzVHJhY2tpbmcuaGFuZGxlTGlua0NsaWNrKTtcblx0fSxcblxuXHQvKipcblx0ICogSGFuZGxlIExpbmsgQ2xpY2tzLlxuXHQgKlxuXHQgKiBAcGFyYW0gZVxuXHQgKi9cblx0aGFuZGxlTGlua0NsaWNrOiAoZSkgPT4ge1xuXHRcdGlmIChlLnR5cGUgPT09ICdhdXhjbGljaycgJiYgZS5idXR0b24gIT09IHBsYXVzaWJsZUxpbmtzVHJhY2tpbmcubWlkZGxlTW91c2VCdXR0b24pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgbGluayA9IHBsYXVzaWJsZUxpbmtzVHJhY2tpbmcuZ2V0TGlua0VsKGUudGFyZ2V0KTtcblxuXHRcdGlmIChsaW5rICYmIHBsYXVzaWJsZUxpbmtzVHJhY2tpbmcuc2hvdWxkVHJhY2tMaW5rKGxpbmspKSB7XG5cdFx0XHR2YXIgZXZlbnROYW1lID0gJ0Nsb2FrZWQgTGluazogQ2xpY2snO1xuXHRcdFx0dmFyIGV2ZW50UHJvcHMgPSB7dXJsOiBsaW5rLmhyZWZ9O1xuXG5cdFx0XHRyZXR1cm4gcGxhdXNpYmxlTGlua3NUcmFja2luZy5zZW5kTGlua0NsaWNrRXZlbnQoZSwgbGluaywgZXZlbnROYW1lLCBldmVudFByb3BzKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHJpZXZlcyBhIGxpbmsgZWxlbWVudCBmcm9tIGFuIGV2ZW50IHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIGxpbmtcblx0ICpcblx0ICogQHJldHVybnMge3tocmVmfXwqfVxuXHQgKi9cblx0Z2V0TGlua0VsOiAobGluaykgPT4ge1xuXHRcdHdoaWxlIChsaW5rICYmICh0eXBlb2YgbGluay50YWdOYW1lID09PSAndW5kZWZpbmVkJyB8fCBsaW5rLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2EnIHx8ICFsaW5rLmhyZWYpKSB7XG5cdFx0XHRsaW5rID0gbGluay5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiBsaW5rO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBTaG91bGQgd2UgdHJhY2sgdGhpcyBsaW5rP1xuXHQgKlxuXHQgKiBAcGFyYW0gbGlua1xuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdHNob3VsZFRyYWNrTGluazogKGxpbmspID0+IHtcblx0XHRsZXQgYWZmaWxpYXRlTGlua3MgPSBwbGF1c2libGVBZmZpbGlhdGVMaW5rcztcblxuXHRcdGxldCBmb3VuZE1hdGNoID0gYWZmaWxpYXRlTGlua3MuZmlsdGVyKChhZmZpbGlhdGVMaW5rKSA9PiB7XG5cdFx0XHRyZXR1cm4gbGluay5ocmVmLm1hdGNoKGFmZmlsaWF0ZUxpbmspO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGZvdW5kTWF0Y2gubGVuZ3RoID4gMDtcblx0fSxcblxuXHQvKipcblx0ICogU2VuZHMgdGhlIGNsaWNrIGV2ZW50IHRvIHRoZSBQbGF1c2libGUgQVBJLlxuXHQgKlxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHBhcmFtIGxpbmtcblx0ICogQHBhcmFtIGV2ZW50TmFtZVxuXHQgKiBAcGFyYW0gZXZlbnRQcm9wc1xuXHQgKi9cblx0c2VuZExpbmtDbGlja0V2ZW50OiAoZXZlbnQsIGxpbmssIGV2ZW50TmFtZSwgZXZlbnRQcm9wcykgPT4ge1xuXHRcdHZhciBmb2xsb3dlZExpbmsgPSBmYWxzZTtcblxuXHRcdGZ1bmN0aW9uIGZvbGxvd0xpbmsoKSB7XG5cdFx0XHRpZiAoIWZvbGxvd2VkTGluaykge1xuXHRcdFx0XHRmb2xsb3dlZExpbmsgPSB0cnVlO1xuXHRcdFx0XHR3aW5kb3cubG9jYXRpb24gPSBsaW5rLmhyZWY7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHBsYXVzaWJsZUxpbmtzVHJhY2tpbmcuc2hvdWxkRm9sbG93TGluayhldmVudCwgbGluaykpIHtcblx0XHRcdHBsYXVzaWJsZShldmVudE5hbWUsIHtwcm9wczogZXZlbnRQcm9wcywgY2FsbGJhY2s6IGZvbGxvd0xpbmt9KTtcblx0XHRcdHNldFRpbWVvdXQoZm9sbG93TGluaywgNTAwMCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwbGF1c2libGUoZXZlbnROYW1lLCB7cHJvcHM6IGV2ZW50UHJvcHN9KTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcGFyYW0gbGlua1xuXHQgKiBAcmV0dXJucyB7Knxib29sZWFufVxuXHQgKi9cblx0c2hvdWxkRm9sbG93TGluazogKGV2ZW50LCBsaW5rKSA9PiB7XG5cdFx0Ly8gSWYgZGVmYXVsdCBoYXMgYmVlbiBwcmV2ZW50ZWQgYnkgYW4gZXh0ZXJuYWwgc2NyaXB0LCBQbGF1c2libGUgc2hvdWxkIG5vdCBpbnRlcmNlcHQgbmF2aWdhdGlvbi5cblx0XHRpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciB0YXJnZXRzQ3VycmVudFdpbmRvdyA9ICFsaW5rLnRhcmdldCB8fCBsaW5rLnRhcmdldC5tYXRjaCgvXl8oc2VsZnxwYXJlbnR8dG9wKSQvaSk7XG5cdFx0dmFyIGlzUmVndWxhckNsaWNrID0gIShldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkpICYmIGV2ZW50LnR5cGUgPT09ICdjbGljayc7XG5cblx0XHRyZXR1cm4gdGFyZ2V0c0N1cnJlbnRXaW5kb3cgJiYgaXNSZWd1bGFyQ2xpY2s7XG5cdH1cbn1cblxucGxhdXNpYmxlTGlua3NUcmFja2luZy5pbml0KCk7XG4iXSwibmFtZXMiOlsicGxhdXNpYmxlTGlua3NUcmFja2luZyIsIm1pZGRsZU1vdXNlQnV0dG9uIiwiaW5pdCIsImJpbmRFdmVudHMiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVMaW5rQ2xpY2siLCJlIiwidHlwZSIsImJ1dHRvbiIsImxpbmsiLCJnZXRMaW5rRWwiLCJ0YXJnZXQiLCJzaG91bGRUcmFja0xpbmsiLCJldmVudFByb3BzIiwidXJsIiwiaHJlZiIsInNlbmRMaW5rQ2xpY2tFdmVudCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInBhcmVudE5vZGUiLCJwbGF1c2libGVBZmZpbGlhdGVMaW5rcyIsImZpbHRlciIsImFmZmlsaWF0ZUxpbmsiLCJtYXRjaCIsImxlbmd0aCIsImV2ZW50IiwiZXZlbnROYW1lIiwiZm9sbG93ZWRMaW5rIiwiZm9sbG93TGluayIsIndpbmRvdyIsImxvY2F0aW9uIiwic2hvdWxkRm9sbG93TGluayIsInBsYXVzaWJsZSIsInByb3BzIiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwidGFyZ2V0c0N1cnJlbnRXaW5kb3ciLCJpc1JlZ3VsYXJDbGljayIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiXSwic291cmNlUm9vdCI6IiJ9